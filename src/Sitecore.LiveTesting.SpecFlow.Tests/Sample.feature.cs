// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Sitecore.LiveTesting.SpecFlow.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Sitecore.LiveTesting.Initialization.InitializationHandler(typeof(Sitecore.LiveTesting.SpecFlow.Tests.StepDefinitions.InitializationHandler))]
    public partial class InitializationHandlersFeature : Sitecore.LiveTesting.SpecFlow.Tests.SampleLiveTestBase, Xunit.IUseFixture<InitializationHandlersFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Sample.feature"
#line hidden
        
        public InitializationHandlersFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            Sitecore.LiveTesting.Applications.TestApplicationManager defaultApplicationManager;
            Sitecore.LiveTesting.Applications.TestApplicationHost defaultApplicationHost;
            defaultApplicationManager = Sitecore.LiveTesting.SpecFlow.Tests.SampleLiveTestBase.GetDefaultTestApplicationManager(typeof(InitializationHandlersFeature));
            defaultApplicationHost = Sitecore.LiveTesting.SpecFlow.Tests.SampleLiveTestBase.GetDefaultApplicationHost(typeof(InitializationHandlersFeature));
            if ((System.Web.Hosting.HostingEnvironment.IsHosted 
                        || ((defaultApplicationManager == null) 
                        || (defaultApplicationHost == null))))
            {
                testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
                TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Initialization handlers", "", ProgrammingLanguage.CSharp, new string[] {
                            "live"});
                testRunner.OnFeatureStart(featureInfo);
            }
            else
            {
                Sitecore.LiveTesting.Applications.TestApplication application;
                application = defaultApplicationManager.StartApplication(defaultApplicationHost);
                application.ExecuteAction(new System.Action(InitializationHandlersFeature.FeatureSetup));
            }
        }
        
        public static void FeatureTearDown()
        {
            Sitecore.LiveTesting.Applications.TestApplicationManager defaultApplicationManager;
            Sitecore.LiveTesting.Applications.TestApplicationHost defaultApplicationHost;
            defaultApplicationManager = Sitecore.LiveTesting.SpecFlow.Tests.SampleLiveTestBase.GetDefaultTestApplicationManager(typeof(InitializationHandlersFeature));
            defaultApplicationHost = Sitecore.LiveTesting.SpecFlow.Tests.SampleLiveTestBase.GetDefaultApplicationHost(typeof(InitializationHandlersFeature));
            if ((System.Web.Hosting.HostingEnvironment.IsHosted 
                        || ((defaultApplicationManager == null) 
                        || (defaultApplicationHost == null))))
            {
                testRunner.OnFeatureEnd();
                testRunner = null;
            }
            else
            {
                Sitecore.LiveTesting.Applications.TestApplication application;
                application = defaultApplicationManager.StartApplication(defaultApplicationHost);
                application.ExecuteAction(new System.Action(InitializationHandlersFeature.FeatureTearDown));
            }
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(InitializationHandlersFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Initialization handlers")]
        [Xunit.TraitAttribute("Description", "Initialization handler invocation")]
        public virtual void InitializationHandlerInvocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Initialization handler invocation", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("test with defined initialization handler", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("test is about to be executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("initialization handler for the test is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Initialization handlers")]
        [Xunit.TraitAttribute("Description", "Disposable initialization handler invocation")]
        [Sitecore.LiveTesting.Initialization.InitializationHandler(typeof(Sitecore.LiveTesting.SpecFlow.Tests.StepDefinitions.DisposableInitializationHandler))]
        public virtual void DisposableInitializationHandlerInvocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Disposable initialization handler invocation", new string[] {
                        "sampleTag",
                        "meaninglessTag"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("test with defined initialization handler that implements IDisposable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.When("test was executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.Then("initialization handler instance is disposed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Initialization handlers")]
        [Xunit.TraitAttribute("Description", "Initialization handler prioritization")]
        [Sitecore.LiveTesting.Initialization.InitializationHandler(typeof(Sitecore.LiveTesting.SpecFlow.Tests.StepDefinitions.LowPriorityInitializationHandler), Priority=1)]
        [Sitecore.LiveTesting.Initialization.InitializationHandler(typeof(Sitecore.LiveTesting.SpecFlow.Tests.StepDefinitions.DisposableInitializationHandler))]
        public virtual void InitializationHandlerPrioritization()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Initialization handler prioritization", new string[] {
                        "lowPriorityTag",
                        "sampleTag"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("test with multiple defined initialization handlers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.When("test is about to be executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("initialization handlers are created in order of their priority", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [System.SerializableAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                InitializationHandlersFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                InitializationHandlersFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
